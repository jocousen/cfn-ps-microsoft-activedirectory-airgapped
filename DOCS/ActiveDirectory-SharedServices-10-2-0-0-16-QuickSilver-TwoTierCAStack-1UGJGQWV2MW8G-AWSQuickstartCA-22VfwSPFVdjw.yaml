schemaVersion: '0.3'
description: Deploy Two Tier PKI with SSM Automation
parameters:
  OrCaValidityPeriodUnits:
    description: Offline Root CA Certificate Validity Period in Years
    type: String
  QSS3BucketName:
    default: aws-quickstart
    description: S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
    type: String
  SubCaValidityPeriodUnits:
    description: Subordinate CA Certificate Validity Period in Years
    type: String
  DomainDNSName:
    description: Fully qualified domain name (FQDN) of the forest root domain e.g. example.com
    type: String
  DomainNetBIOSName:
    description: NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. EXAMPLE
    type: String
  OrCaKeyLength:
    description: Offline Root CA Key Length
    type: String
  SubCaKeyLength:
    description: Subordinate CA Key Length
    type: String
  SubCaServerNetBIOSName:
    description: NetBIOS name of the Subordinate CA server (up to 15 characters)
    type: String
  DomainController1IP:
    description: Fixed private IP for the first Active Directory server located in Availability Zone 1
    type: String
  DomainController2IP:
    description: Fixed private IP for the first Active Directory server located in Availability Zone 1
    type: String
  AdministratorSecret:
    description: AWS Secrets Parameter Name that has Password and User namer for the domain administrator.
    type: String
  OrCaServerNetBIOSName:
    description: NetBIOS name of the Offline Root CA server (up to 15 characters)
    type: String
  QSS3KeyPrefix:
    default: quickstart-microsoft-pki/
    description: S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
    type: String
  UseS3ForCRL:
    description: Use S3 for Enterprise Root CA CRL location
    type: String
  DirectoryType:
    description: Type of Active Directory CA will be integrated with
    type: String
  EnableAdvancedAudtingandMetrics:
    description: Enable advanced auditing and metrics
    type: String
  OrCaHashAlgorithm:
    description: Offline Root CA Hash Algorithm
    type: String
  URLSuffix:
    default: amazonaws.com
    description: AWS URL suffix
    type: String
  VPCCIDR:
    default: 10.0.0.0/16
    description: CIDR block for private subnet 1 located in Availability Zone 1.
    type: String
  QSS3BucketRegion:
    default: us-east-1
    description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
    type: String
  SubCaHashAlgorithm:
    description: Subordinate CA Hash Algorithm
    type: String
  S3CRLBucketName:
    description: S3 bucket name for Enterprise Root CA CRL
    type: String
  StackName:
    description: Stack Name Input for cfn resource signal
    type: String
mainSteps:
  - name: CaInstanceIds
    action: aws:executeAwsApi
    nextStep: OrcaInstanceId
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Filters:
        - Values:
            - '{{OrCaServerNetBIOSName}}'
            - '{{SubCaServerNetBIOSName}}'
          Name: tag:Name
        - Values:
            - '{{StackName}}'
          Name: tag:aws:cloudformation:stack-name
        - Values:
            - running
          Name: instance-state-name
      Service: ec2
      Api: DescribeInstances
    outputs:
      - Type: StringList
        Name: InstanceIds
        Selector: $.Reservations..Instances..InstanceId
  - name: OrcaInstanceId
    action: aws:executeAwsApi
    nextStep: SubCaInstanceId
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Filters:
        - Values:
            - '{{OrCaServerNetBIOSName}}'
          Name: tag:Name
        - Values:
            - '{{StackName}}'
          Name: tag:aws:cloudformation:stack-name
        - Values:
            - running
          Name: instance-state-name
      Service: ec2
      Api: DescribeInstances
    outputs:
      - Type: String
        Name: InstanceId
        Selector: $.Reservations[0].Instances[0].InstanceId
  - name: SubCaInstanceId
    action: aws:executeAwsApi
    nextStep: intializeInstances
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Filters:
        - Values:
            - '{{SubCaServerNetBIOSName}}'
          Name: tag:Name
        - Values:
            - '{{StackName}}'
          Name: tag:aws:cloudformation:stack-name
        - Values:
            - running
          Name: instance-state-name
      Service: ec2
      Api: DescribeInstances
    outputs:
      - Type: String
        Name: InstanceId
        Selector: $.Reservations[0].Instances[0].InstanceId
  - name: intializeInstances
    action: aws:runCommand
    nextStep: configureInstances
    isEnd: false
    inputs:
      Parameters:
        commands: |-
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12

          $S3BucketName = '{{QSS3BucketName}}'
          $S3KeyPrefix = '{{QSS3KeyPrefix}}'
          $S3BucketRegion = '{{QSS3BucketRegion}}'

          $CustomModules = @(
              'Module-Pki.psd1',
              'Module-Pki.psm1'
          )

          $Modules = @(
              @{
                  Name    = 'NetworkingDsc'
                  Version = '8.2.0'
              },
              @{
                  Name    = 'ComputerManagementDsc'
                  Version = '8.5.0'
              },
              @{
                  Name = 'AuditPolicyDsc'
                  Version = '1.4.0.0'
              }
          )

          Write-Output 'Creating AWSQuickstart Directory'
          Try {
              $Null = New-Item -Path 'C:\AWSQuickstart\Module-Pki' -ItemType 'Directory' -ErrorAction Stop
          } Catch [System.Exception] {
              Write-Output "Failed to create AWSQuickstart directory $_"
              Exit 1
          }

          $S3KeyPrefix = $S3KeyPrefix.Substring(0,$S3KeyPrefix.Length -1)
          Write-Output 'Downloading Pki PowerShell Module'
          Foreach ($CustomModule in $CustomModules) {
              Try {
                  $Null = Read-S3Object -BucketName $S3BucketName -Key "$($S3KeyPrefix)/scripts/Modules/Module-Pki/$CustomModule" -File "C:\AWSQuickstart\Module-Pki\$CustomModule" -Region $S3BucketRegion
              } Catch [System.Exception] {
                  Write-Output "Failed to read and download $CustomModule.Name from S3 $_"
                  Exit 1
              }
          }

          Write-Output 'Installing NuGet Package Provider'
          Try {
              $Null = Install-PackageProvider -Name 'NuGet' -MinimumVersion '2.8.5' -Force -ErrorAction Stop
          } Catch [System.Exception] {
              Write-Output "Failed to install NuGet Package Provider $_"
              Exit 1
          }

          Write-Output 'Setting PSGallery Respository to trusted'
          Try {
              Set-PSRepository -Name 'PSGallery' -InstallationPolicy 'Trusted' -ErrorAction Stop
          } Catch [System.Exception] {
              Write-Output "Failed to set PSGallery Respository to trusted $_"
              Exit 1
          }

          Write-Output 'Installing the needed Powershell DSC modules for this Quick Start'
          Foreach ($Module in $Modules) {
              Try {
                  Install-Module -Name $Module.Name -RequiredVersion $Module.Version -ErrorAction Stop
              } Catch [System.Exception] {
                  Write-Output "Failed to Import Modules $_"
                  Exit 1
              }
          } 
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: /aws/Quick_Start/ActiveDirectory-SharedServices-10-2-0-0-16-QuickSilver-TwoTierCAStack-1UGJGQWV2MW8G
      InstanceIds:
        - '{{CaInstanceIds.InstanceIds}}'
      DocumentName: AWS-RunPowerShellScript
  - name: configureInstances
    action: aws:runCommand
    nextStep: configureOrCaMof
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Parameters:
        commands: |-
          Try {
              Import-Module -Name 'C:\AWSQuickstart\Module-Pki\Module-Pki.psm1' -Force
          } Catch [System.Exception] {
              Write-Output "Failed to import Pki PS Module $_"
              Exit 1
          }
          New-VolumeFromRawDisk
          Invoke-PreConfig
          Invoke-LcmConfig
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: /aws/Quick_Start/ActiveDirectory-SharedServices-10-2-0-0-16-QuickSilver-TwoTierCAStack-1UGJGQWV2MW8G
      InstanceIds:
        - '{{CaInstanceIds.InstanceIds}}'
      DocumentName: AWS-RunPowerShellScript
  - name: configureOrCaMof
    action: aws:runCommand
    nextStep: runOrCaMof
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Parameters:
        commands: |-
          Try {
              Import-Module -Name 'C:\AWSQuickstart\Module-Pki\Module-Pki.psm1' -Force
          } Catch [System.Exception] {
              Write-Output "Failed to import Pki PS Module $_"
              Exit 1
          }
          $EniConfig = Get-EniConfig
          Set-DscConfiguration -CaType Offline -DomainController1IP '{{DomainController1IP}}' -DomainController2IP '{{DomainController2IP}}' -GatewayAddress $EniConfig.GatewayAddress -InstanceNetBIOSName '{{OrCaServerNetBIOSName}}' -IpAddress $EniConfig.IpAddress -MacAddress $EniConfig.MacAddress
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: /aws/Quick_Start/ActiveDirectory-SharedServices-10-2-0-0-16-QuickSilver-TwoTierCAStack-1UGJGQWV2MW8G
      InstanceIds:
        - '{{OrcaInstanceId.InstanceId}}'
      DocumentName: AWS-RunPowerShellScript
  - name: runOrCaMof
    action: aws:runCommand
    nextStep: InstallOrCa
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Parameters:
        commands: |-
          Try {
              Import-Module -Name 'C:\AWSQuickstart\Module-Pki\Module-Pki.psm1' -Force
          } Catch [System.Exception] {
              Write-Output "Failed to import Pki PS Module $_"
              Exit 1
          }
          Start-DscConfiguration 'C:\AWSQuickstart\ConfigInstance' -Wait -Verbose -Force
          Invoke-DscStatusCheck
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: /aws/Quick_Start/ActiveDirectory-SharedServices-10-2-0-0-16-QuickSilver-TwoTierCAStack-1UGJGQWV2MW8G
      InstanceIds:
        - '{{OrcaInstanceId.InstanceId}}'
      DocumentName: AWS-RunPowerShellScript
  - name: InstallOrCa
    action: aws:runCommand
    nextStep: configureSubCaMof
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Parameters:
        commands: |-
          Try {
              Import-Module -Name 'C:\AWSQuickstart\Module-Pki\Module-Pki.psm1' -Force
          } Catch [System.Exception] {
              Write-Output "Failed to import Pki PS Module $_"
              Exit 1
          }
          $Secret = Get-SecretInfo -Domain '{{DomainDNSName}}' -SecretArn '{{AdministratorSecret}}'
          Invoke-TwoTierOrCaConfig -Credentials $Secret.Credentials -DirectoryType '{{DirectoryType}}' -DomainDNSName '{{DomainDNSName}}' -OrCaCommonName '{{OrCaServerNetBIOSName}}' -OrCaHashAlgorithm '{{OrCaHashAlgorithm}}' -OrCaKeyLength '{{OrCaKeyLength}}' -OrCaValidityPeriodUnits '{{OrCaValidityPeriodUnits}}' -S3CRLBucketName '{{S3CRLBucketName}}' -SubCaServerNetBIOSName '{{SubCaServerNetBIOSName}}' -UseS3ForCRL '{{UseS3ForCRL}}'
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: /aws/Quick_Start/ActiveDirectory-SharedServices-10-2-0-0-16-QuickSilver-TwoTierCAStack-1UGJGQWV2MW8G
      InstanceIds:
        - '{{OrcaInstanceId.InstanceId}}'
      DocumentName: AWS-RunPowerShellScript
  - name: configureSubCaMof
    action: aws:runCommand
    nextStep: runSubCaMof
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Parameters:
        commands: |-
          Try {
              Import-Module -Name 'C:\AWSQuickstart\Module-Pki\Module-Pki.psm1' -Force
          } Catch [System.Exception] {
              Write-Output "Failed to import Pki PS Module $_"
              Exit 1
          }
          $EniConfig = Get-EniConfig
          $Secret = Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{AdministratorSecret}}'
          Set-DscConfiguration -CaType Enterprise -Credentials $Secret.Credentials -DomainController1IP '{{DomainController1IP}}' -DomainController2IP '{{DomainController2IP}}' -DomainDNSName '{{DomainDNSName}}' -GatewayAddress $EniConfig.GatewayAddress -InstanceNetBIOSName '{{SubCaServerNetBIOSName}}' -IpAddress $EniConfig.IpAddress -MacAddress $EniConfig.MacAddress -UseS3ForCRL '{{UseS3ForCRL}}'
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: /aws/Quick_Start/ActiveDirectory-SharedServices-10-2-0-0-16-QuickSilver-TwoTierCAStack-1UGJGQWV2MW8G
      InstanceIds:
        - '{{SubCaInstanceId.InstanceId}}'
      DocumentName: AWS-RunPowerShellScript
  - name: runSubCaMof
    action: aws:runCommand
    nextStep: InstallSubCa
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Parameters:
        commands: |-
          Try {
              Import-Module -Name 'C:\AWSQuickstart\Module-Pki\Module-Pki.psm1' -Force
          } Catch [System.Exception] {
              Write-Output "Failed to import Pki PS Module $_"
              Exit 1
          }
          Start-DscConfiguration 'C:\AWSQuickstart\ConfigInstance' -Wait -Verbose -Force
          Invoke-DscStatusCheck
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: /aws/Quick_Start/ActiveDirectory-SharedServices-10-2-0-0-16-QuickSilver-TwoTierCAStack-1UGJGQWV2MW8G
      InstanceIds:
        - '{{SubCaInstanceId.InstanceId}}'
      DocumentName: AWS-RunPowerShellScript
  - name: InstallSubCa
    action: aws:runCommand
    nextStep: CertIssueSubCa
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Parameters:
        commands: |-
          Try {
              Import-Module -Name 'C:\AWSQuickstart\Module-Pki\Module-Pki.psm1' -Force
          } Catch [System.Exception] {
              Write-Output "Failed to import Pki PS Module $_"
              Exit 1
          }
          $Secret = Get-SecretInfo -Domain '{{DomainNetBIOSName}}' -SecretArn '{{AdministratorSecret}}'
          Invoke-TwoTierSubCaInstall -Credentials $Secret.Credentials -DirectoryType '{{DirectoryType}}' -S3CRLBucketName '{{S3CRLBucketName}}' -SubCaCommonName '{{SubCaServerNetBIOSName}}' -SubCaHashAlgorithm '{{SubCaHashAlgorithm}}' -SubCaKeyLength '{{SubCaKeyLength}}' -SubCaValidityPeriodUnits '{{SubCaValidityPeriodUnits}}' -UseS3ForCRL '{{UseS3ForCRL}}'
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: /aws/Quick_Start/ActiveDirectory-SharedServices-10-2-0-0-16-QuickSilver-TwoTierCAStack-1UGJGQWV2MW8G
      InstanceIds:
        - '{{SubCaInstanceId.InstanceId}}'
      DocumentName: AWS-RunPowerShellScript
  - name: CertIssueSubCa
    action: aws:runCommand
    nextStep: FinalizeSubCa
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Parameters:
        commands: |-
          Try {
              Import-Module -Name 'C:\AWSQuickstart\Module-Pki\Module-Pki.psm1' -Force
          } Catch [System.Exception] {
              Write-Output "Failed to import Pki PS Module $_"
              Exit 1
          }
          $Secret = Get-SecretInfo -Domain '{{DomainDNSName}}' -SecretArn '{{AdministratorSecret}}'
          Invoke-TwoTierSubCaCertIssue -Credentials $Secret.Credentials -DirectoryType '{{DirectoryType}}' -DomainDNSName '{{DomainDNSName}}'

          If ('{{EnableAdvancedAudtingandMetrics}}' -eq 'true') {
            Set-AuditDscConfiguration
            Set-LogsAndMetricsCollection -Stackname '{{StackName}}'
          }                

          Invoke-Cleanup -VPCCIDR '{{VPCCIDR}}'
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: /aws/Quick_Start/ActiveDirectory-SharedServices-10-2-0-0-16-QuickSilver-TwoTierCAStack-1UGJGQWV2MW8G
      InstanceIds:
        - '{{OrcaInstanceId.InstanceId}}'
      DocumentName: AWS-RunPowerShellScript
  - name: FinalizeSubCa
    action: aws:runCommand
    nextStep: CFNSignalEnd
    isEnd: false
    onFailure: step:signalfailure
    inputs:
      Parameters:
        commands: |-
          Try {
              Import-Module -Name 'C:\AWSQuickstart\Module-Pki\Module-Pki.psm1' -Force
          } Catch [System.Exception] {
              Write-Output "Failed to import Pki PS Module $_"
              Exit 1
          }
          $Secret = Get-SecretInfo -Domain {{DomainNetBIOSName}} -SecretArn {{AdministratorSecret}}
          Invoke-TwoTierSubCaConfig -Credentials $Secret.Credentials -DirectoryType '{{DirectoryType}}' -S3CRLBucketName '{{S3CRLBucketName}}' -UseS3ForCRL '{{UseS3ForCRL}}'

          If ('{{EnableAdvancedAudtingandMetrics}}' -eq 'true') {
            Set-AuditDscConfiguration
            Set-LogsAndMetricsCollection -Stackname '{{StackName}}'
          }

          Invoke-Cleanup -VPCCIDR '{{VPCCIDR}}'
      CloudWatchOutputConfig:
        CloudWatchOutputEnabled: true
        CloudWatchLogGroupName: /aws/Quick_Start/ActiveDirectory-SharedServices-10-2-0-0-16-QuickSilver-TwoTierCAStack-1UGJGQWV2MW8G
      InstanceIds:
        - '{{SubCaInstanceId.InstanceId}}'
      DocumentName: AWS-RunPowerShellScript
  - name: CFNSignalEnd
    action: aws:branch
    inputs:
      Choices:
        - NextStep: signalsuccess
          Not:
            Variable: '{{StackName}}'
            StringEquals: ''
        - NextStep: sleepend
          Variable: '{{StackName}}'
          StringEquals: ''
      Default: signalsuccess
  - name: signalsuccess
    action: aws:executeAwsApi
    isEnd: true
    inputs:
      Status: SUCCESS
      UniqueId: '{{SubCaInstanceId.InstanceId}}'
      LogicalResourceId: SubCA
      Service: cloudformation
      Api: SignalResource
      StackName: '{{StackName}}'
  - name: sleepend
    action: aws:sleep
    isEnd: true
    inputs:
      Duration: PT1S
  - name: signalfailure
    action: aws:executeAwsApi
    isEnd: true
    inputs:
      Status: FAILURE
      UniqueId: '{{SubCaInstanceId.InstanceId}}'
      LogicalResourceId: SubCA
      Service: cloudformation
      Api: SignalResource
      StackName: '{{StackName}}'
