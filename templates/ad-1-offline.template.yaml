AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  This template creates Microsoft Active Directory (AD) with Two-Tier PKI infrastructure 
  inside an AWS VPC. This template creates Amazon EC2 Windows instances and related 
  resources. You will be billed for the AWS resources used if you create a stack 
  from this template. (qs-1qup6ra8q)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - DHCPOptionSet
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
          - DomainAdminUser
          - DomainAdminPassword
          - ADServer1NetBIOSName
          - ADServer1PrivateIP
          - ADServer2NetBIOSName
          - ADServer2PrivateIP
          - ADServer1InstanceType
          - ADServer2InstanceType
          - WindowsServerAMI
          - DataDriveSizeGiB
          - InstallRSAT
      - Label:
          default: Microsoft PKI Configuration
        Parameters:
          - PKI
          - CaKeyLength
          - CaHashAlgorithm
          - CaValidityPeriodUnits
          - OrCaValidityPeriodUnits
          - UseS3ForCRL
          - S3CRLBucketName
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
          - EbsEncryptionKmsKeyId
          - KeyPairName
    ParameterLabels:
      VPCID:
        default: VPC ID
      VPCCIDR:
        default: VPC CIDR
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      DHCPOptionSet:
        default: Create DHCP Options Set
      DomainDNSName:
        default: Domain DNS Name
      DomainNetBIOSName:
        default: Domain NetBIOS Name
      DomainAdminUser:
        default: Domain Admin User
      DomainAdminPassword:
        default: Domain Admin Password
      ADServer1NetBIOSName:
        default: AD Server 1 NetBIOS Name
      ADServer1PrivateIP:
        default: AD Server 1 Private IP
      ADServer2NetBIOSName:
        default: AD Server 2 NetBIOS Name
      ADServer2PrivateIP:
        default: AD Server 2 Private IP
      ADServer1InstanceType:
        default: AD Server 1 Instance Type
      ADServer2InstanceType:
        default: AD Server 2 Instance Type
      WindowsServerAMI:
        default: Windows Server AMI
      DataDriveSizeGiB:
        default: Data Drive Size
      InstallRSAT:
        default: Install RSAT
      PKI:
        default: PKI Infrastructure
      CaKeyLength:
        default: CA Key Length
      CaHashAlgorithm:
        default: CA Hash Algorithm
      CaValidityPeriodUnits:
        default: CA Validity Period (Years)
      OrCaValidityPeriodUnits:
        default: Offline Root CA Validity Period (Years)
      UseS3ForCRL:
        default: Use S3 for CRL
      S3CRLBucketName:
        default: S3 CRL Bucket Name
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 Bucket Region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      EbsEncryptionKmsKeyId:
        default: EBS Encryption KMS Key ID
      KeyPairName:
        default: Key Pair Name
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: ID of the VPC (e.g., vpc-0343606e)
  VPCCIDR:
    Type: String
    Description: CIDR block for the VPC
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the private subnet 1 in Availability Zone 1
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the private subnet 2 in Availability Zone 2
  DHCPOptionSet:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: Create a DHCP Options Set
    Type: String
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: example.com
    Description: Fully qualified domain name (FQDN) of the forest root domain
    MaxLength: '255'
    MinLength: '2'
    Type: String
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: example
    Description: NetBIOS name of the domain (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  DomainAdminUser:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: Admin
    Description: User name for the account that will be added as Domain Administrator. Must be at least 5 characters.
    MaxLength: '25'
    MinLength: '5'
    Type: String
  DomainAdminPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the domain admin user. Must be at least 8 characters containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: true
    Type: String
  ADServer1NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: DC1
    Description: NetBIOS name of the first AD server (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADServer1PrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Description: Fixed private IP for the first Active Directory server located in Availability Zone 1
    Type: String
  ADServer2NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: DC2
    Description: NetBIOS name of the second AD server (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADServer2PrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Description: Fixed private IP for the second Active Directory server located in Availability Zone 2
    Type: String
  ADServer1InstanceType:
    AllowedValues:
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
    Default: m5.xlarge
    Description: Amazon EC2 instance type for the first Active Directory instance
    Type: String
  ADServer2InstanceType:
    AllowedValues:
      - t3.large
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
    Default: m5.xlarge
    Description: Amazon EC2 instance type for the second Active Directory instance
    Type: String
  WindowsServerAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base
    Description: SSM parameter to fetch the latest Windows Server AMI ID
  DataDriveSizeGiB:
    Type: Number
    Default: '100'
    Description: Size of the Data Drive in GiB
  InstallRSAT:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Install Remote Server Administration Tools
    Type: String
  PKI:
    AllowedValues:
      - 'No'
      - 'Two-Tier'
    Default: 'Two-Tier'
    Description: Deploy PKI Infrastructure
    Type: String
  CaKeyLength:
    AllowedValues:
      - '2048'
      - '4096'
    Default: '2048'
    Description: CA Key Length
    Type: String
  CaHashAlgorithm:
    AllowedValues:
      - SHA256
      - SHA384
      - SHA512
    Default: SHA256
    Description: CA Hash Algorithm
    Type: String
  CaValidityPeriodUnits:
    Default: '5'
    Description: Validity Period in Years
    Type: String
  OrCaValidityPeriodUnits:
    Default: '10'
    Description: Validity Period in Years
    Type: String
  UseS3ForCRL:
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'No'
    Description: Use S3 for CRL location
    Type: String
  S3CRLBucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: examplebucket
    Description: S3 bucket name for CRL location
    Type: String
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets
    Type: String
  QSS3BucketRegion:
    Default: us-east-1
    Description: AWS Region where the Quick Start S3 bucket exists
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^([0-9a-zA-Z-.]+/)*$
    Default: quickstart-microsoft-activedirectory/
    Description: S3 key prefix for the Quick Start assets
    Type: String
  EbsEncryptionKmsKeyId:
    Type: String
    Default: ''
    Description: KMS key ID or ARN for EBS encryption
  KeyPairName:
    Description: Name of an existing EC2 key pair
    Type: AWS::EC2::KeyPair::KeyName
Conditions:
  CreateDHCPOptions: !Equals 
    - !Ref DHCPOptionSet
    - 'Yes'
  DeployPKI: !Equals 
    - !Ref PKI
    - 'Two-Tier'
  UseS3CRL: !Equals 
    - !Ref UseS3ForCRL
    - 'Yes'
  UsingDefaultBucket: !Equals 
    - !Ref QSS3BucketName
    - 'aws-quickstart'
  HasKmsKey: !Not [!Equals [!Ref EbsEncryptionKmsKeyId, '']]

Resources:
  ADServerRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}submodules/cfn-ps-microsoft-pki/*'
                Effect: Allow
          PolicyName: aws-quick-start-pki-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: 
                  - !Ref ADAdminSecrets
                  - !Ref ADAltUserSecrets
                  - !Ref ADServer1Secrets
                  - !Ref ADServer2Secrets
                Effect: Allow
          PolicyName: aws-quick-start-secretsmanager-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ssm:StartAutomationExecution
                  - ssm:GetAutomationExecution
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:automation-definition/*'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/AWS-RunPowerShellScript'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:document/AWSQuickStart*'
                  - !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:managed-instance/*'
                Effect: Allow
          PolicyName: aws-quick-start-ssm-policy
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action: sts:AssumeRole
            Principal:
              Service: ec2.amazonaws.com
            Effect: Allow
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy'

  ADServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ADServerRole

  DomainControllerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Domain Controllers Security Group
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5985
          ToPort: 5985
          CidrIp: !Ref VPCCIDR
          Description: Windows Remote Management
        - IpProtocol: tcp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref VPCCIDR
          Description: DNS
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: !Ref VPCCIDR
          Description: DNS
        - IpProtocol: tcp
          FromPort: 88
          ToPort: 88
          CidrIp: !Ref VPCCIDR
          Description: Kerberos
        - IpProtocol: udp
          FromPort: 88
          ToPort: 88
          CidrIp: !Ref VPCCIDR
          Description: Kerberos
        - IpProtocol: tcp
          FromPort: 123
          ToPort: 123
          CidrIp: !Ref VPCCIDR
          Description: Windows Time
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: !Ref VPCCIDR
          Description: Windows Time
        - IpProtocol: tcp
          FromPort: 135
          ToPort: 135
          CidrIp: !Ref VPCCIDR
          Description: RPC Endpoint Mapper
        - IpProtocol: tcp
          FromPort: 389
          ToPort: 389
          CidrIp: !Ref VPCCIDR
          Description: LDAP
        - IpProtocol: udp
          FromPort: 389
          ToPort: 389
          CidrIp: !Ref VPCCIDR
          Description: LDAP
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          CidrIp: !Ref VPCCIDR
          Description: SMB
        - IpProtocol: udp
          FromPort: 445
          ToPort: 445
          CidrIp: !Ref VPCCIDR
          Description: SMB
        - IpProtocol: tcp
          FromPort: 464
          ToPort: 464
          CidrIp: !Ref VPCCIDR
          Description: Kerberos Change/Set password
        - IpProtocol: udp
          FromPort: 464
          ToPort: 464
          CidrIp: !Ref VPCCIDR
          Description: Kerberos Change/Set password
        - IpProtocol: tcp
          FromPort: 636
          ToPort: 636
          CidrIp: !Ref VPCCIDR
          Description: LDAP SSL
        - IpProtocol: tcp
          FromPort: 3268
          ToPort: 3268
          CidrIp: !Ref VPCCIDR
          Description: LDAP GC
        - IpProtocol: tcp
          FromPort: 3269
          ToPort: 3269
          CidrIp: !Ref VPCCIDR
          Description: LDAP GC SSL
        - IpProtocol: tcp
          FromPort: 9389
          ToPort: 9389
          CidrIp: !Ref VPCCIDR
          Description: MCAS
        - IpProtocol: tcp
          FromPort: 49152
          ToPort: 65535
          CidrIp: !Ref VPCCIDR
          Description: RPC Dynamic Ports
        - IpProtocol: udp
          FromPort: 49152
          ToPort: 65535
          CidrIp: !Ref VPCCIDR
          Description: RPC Dynamic Ports
      Tags:
        - Key: Name
          Value: DomainControllerSG

  DomainControllerInternalSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Domain Controller Internal Communication
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          SourceSecurityGroupId: !Ref DomainControllerSG
          Description: All traffic between Domain Controllers
      Tags:
        - Key: Name
          Value: DomainControllerInternalSG
  ADAdminSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'AD-Admin-${AWS::StackName}'
      Description: 'AD Admin Credentials'
      SecretString: !Sub '{"username":"${DomainAdminUser}","password":"${DomainAdminPassword}"}'

  ADAltUserSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'AD-AltUser-${AWS::StackName}'
      Description: 'AD Alternate User Credentials'
      SecretString: !Sub '{"username":"Administrator","password":"${DomainAdminPassword}"}'

  ADServer1Secrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'AD-${ADServer1NetBIOSName}-${AWS::StackName}'
      Description: 'AD Server1 Instance Information'
      SecretString: !Sub '{"username":"Administrator","password":"${DomainAdminPassword}"}'

  ADServer2Secrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub 'AD-${ADServer2NetBIOSName}-${AWS::StackName}'
      Description: 'AD Server2 Instance Information'
      SecretString: !Sub '{"username":"Administrator","password":"${DomainAdminPassword}"}'

  DomainJoinSecrets:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub '/ad/${AWS::StackName}/domain-join'
      Type: String
      Value: !Sub '{"domain":"${DomainDNSName}","username":"${DomainNetBIOSName}\\${DomainAdminUser}","password":"${DomainAdminPassword}"}'

  AWSQuickStartInstanceConfiguration:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        description: 'Configure Windows Instance'
        parameters:
          InstanceId:
            description: 'Instance ID'
            type: String
          Locale:
            description: 'Windows locale'
            type: String
            default: 'en-US'
          TimeZone:
            description: 'Windows time zone'
            type: String
            default: 'UTC'
        mainSteps:
          - name: ConfigureInstance
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - '{{ InstanceId }}'
              Parameters:
                commands:
                  - |
                    Set-TimeZone -Id "{{ TimeZone }}"
                    Set-WinSystemLocale -SystemLocale "{{ Locale }}"
                    Set-WinUserLanguageList -LanguageList "{{ Locale }}" -Force
                    Restart-Computer -Force

  AWSQuickStartActiveDirectoryDS:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        description: 'Deploy AD DS'
        parameters:
          InstanceId:
            description: 'Instance ID'
            type: String
          DomainDNSName:
            description: 'Fully qualified domain name (FQDN) of the forest root domain'
            type: String
          DomainNetBIOSName:
            description: 'NetBIOS name of the domain'
            type: String
          DomainAdminUser:
            description: 'User name for the account that will be added as Domain Administrator'
            type: String
          DomainAdminPassword:
            description: 'Password for the domain admin user'
            type: String
          SafeModePassword:
            description: 'Password for safe mode administration'
            type: String
          ADServer1NetBIOSName:
            description: 'NetBIOS name of the first AD server'
            type: String
          InstallRSAT:
            description: 'Install RSAT'
            type: String
        mainSteps:
          - name: InstallADDS
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - '{{ InstanceId }}'
              Parameters:
                commands:
                  - |
                    $ErrorActionPreference = "Stop"
                    Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools
                    $SecureString = ConvertTo-SecureString '{{ DomainAdminPassword }}' -AsPlainText -Force
                    $SafeModeSecureString = ConvertTo-SecureString '{{ SafeModePassword }}' -AsPlainText -Force
                    Install-ADDSForest `
                      -DomainName '{{ DomainDNSName }}' `
                      -DomainNetbiosName '{{ DomainNetBIOSName }}' `
                      -SafeModeAdministratorPassword $SafeModeSecureString `
                      -CreateDnsDelegation:$false `
                      -DatabasePath "C:\Windows\NTDS" `
                      -LogPath "C:\Windows\NTDS" `
                      -SysvolPath "C:\Windows\SYSVOL" `
                      -InstallDns:$true `
                      -NoRebootOnCompletion:$true `
                      -Force:$true
                    if ('{{ InstallRSAT }}' -eq 'Yes') {
                        Install-WindowsFeature -Name RSAT -IncludeAllSubFeature
                    }
                    Rename-Computer -NewName '{{ ADServer1NetBIOSName }}' -Force
                    Restart-Computer -Force

  AWSQuickStartActiveDirectoryDC:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        description: 'Join Domain Controller to existing domain'
        parameters:
          InstanceId:
            description: 'Instance ID'
            type: String
          DomainDNSName:
            description: 'Fully qualified domain name (FQDN) of the forest root domain'
            type: String
          DomainAdminUser:
            description: 'User name for the account that will be added as Domain Administrator'
            type: String
          DomainAdminPassword:
            description: 'Password for the domain admin user'
            type: String
          SafeModePassword:
            description: 'Password for safe mode administration'
            type: String
          ADServer2NetBIOSName:
            description: 'NetBIOS name of the second AD server'
            type: String
          InstallRSAT:
            description: 'Install RSAT'
            type: String
        mainSteps:
          - name: JoinDomain
            action: 'aws:runCommand'
            inputs:
              DocumentName: AWS-RunPowerShellScript
              InstanceIds:
                - '{{ InstanceId }}'
              Parameters:
                commands:
                  - |
                    $ErrorActionPreference = "Stop"
                    Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools
                    $SecureString = ConvertTo-SecureString '{{ DomainAdminPassword }}' -AsPlainText -Force
                    $Credential = New-Object System.Management.Automation.PSCredential('{{ DomainAdminUser }}', $SecureString)
                    $SafeModeSecureString = ConvertTo-SecureString '{{ SafeModePassword }}' -AsPlainText -Force
                    Install-ADDSDomainController `
                      -DomainName '{{ DomainDNSName }}' `
                      -Credential $Credential `
                      -SafeModeAdministratorPassword $SafeModeSecureString `
                      -DatabasePath "C:\Windows\NTDS" `
                      -LogPath "C:\Windows\NTDS" `
                      -SysvolPath "C:\Windows\SYSVOL" `
                      -NoRebootOnCompletion:$true `
                      -Force:$true
                    if ('{{ InstallRSAT }}' -eq 'Yes') {
                        Install-WindowsFeature -Name RSAT -IncludeAllSubFeature
                    }
                    Rename-Computer -NewName '{{ ADServer2NetBIOSName }}' -Force
                    Restart-Computer -Force
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Condition: CreateDHCPOptions
    Properties:
      DomainName: !Ref DomainDNSName
      DomainNameServers: 
        - !Ref ADServer1PrivateIP
        - !Ref ADServer2PrivateIP
      Tags:
        - Key: Domain
          Value: !Ref DomainDNSName

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Condition: CreateDHCPOptions
    Properties:
      VpcId: !Ref VPCID
      DhcpOptionsId: !Ref DHCPOptions

  ADServer1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref WindowsServerAMI
      InstanceType: !Ref ADServer1InstanceType
      SubnetId: !Ref PrivateSubnet1ID
      PrivateIpAddress: !Ref ADServer1PrivateIP
      IamInstanceProfile: !Ref ADServerProfile
      SecurityGroupIds: 
        - !Ref DomainControllerSG
        - !Ref DomainControllerInternalSG
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            VolumeType: gp3
            Encrypted: true
            KmsKeyId: !If [HasKmsKey, !Ref EbsEncryptionKmsKeyId, !Ref 'AWS::NoValue']
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: !Ref DataDriveSizeGiB
            VolumeType: gp3
            Encrypted: true
            KmsKeyId: !If [HasKmsKey, !Ref EbsEncryptionKmsKeyId, !Ref 'AWS::NoValue']
      UserData: 
        Fn::Base64: !Sub |
          <powershell>
          $instanceId = (Invoke-WebRequest -Uri http://169.254.169.254/latest/meta-data/instance-id -UseBasicParsing).Content
          Start-SSMAutomationExecution -DocumentName 'AWSQuickStartInstanceConfiguration' -Parameter @{
            'InstanceId'=$instanceId
            'TimeZone'='UTC'
            'Locale'='en-US'
          }
          Start-SSMAutomationExecution -DocumentName 'AWSQuickStartActiveDirectoryDS' -Parameter @{
            'InstanceId'=$instanceId
            'DomainDNSName'='${DomainDNSName}'
            'DomainNetBIOSName'='${DomainNetBIOSName}'
            'DomainAdminUser'='${DomainAdminUser}'
            'DomainAdminPassword'='${DomainAdminPassword}'
            'SafeModePassword'='${DomainAdminPassword}'
            'ADServer1NetBIOSName'='${ADServer1NetBIOSName}'
            'InstallRSAT'='${InstallRSAT}'
          }
          </powershell>
      Tags:
        - Key: Name
          Value: !Ref ADServer1NetBIOSName

  ADServer2:
    Type: AWS::EC2::Instance
    DependsOn: ADServer1
    Properties:
      ImageId: !Ref WindowsServerAMI
      InstanceType: !Ref ADServer2InstanceType
      SubnetId: !Ref PrivateSubnet2ID
      PrivateIpAddress: !Ref ADServer2PrivateIP
      IamInstanceProfile: !Ref ADServerProfile
      SecurityGroupIds: 
        - !Ref DomainControllerSG
        - !Ref DomainControllerInternalSG
      KeyName: !Ref KeyPairName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 50
            VolumeType: gp3
            Encrypted: true
            KmsKeyId: !If [HasKmsKey, !Ref EbsEncryptionKmsKeyId, !Ref 'AWS::NoValue']
        - DeviceName: /dev/xvdf
          Ebs:
            VolumeSize: !Ref DataDriveSizeGiB
            VolumeType: gp3
            Encrypted: true
            KmsKeyId: !If [HasKmsKey, !Ref EbsEncryptionKmsKeyId, !Ref 'AWS::NoValue']
      UserData: 
        Fn::Base64: !Sub |
          <powershell>
          $instanceId = (Invoke-WebRequest -Uri http://169.254.169.254/latest/meta-data/instance-id -UseBasicParsing).Content
          Start-SSMAutomationExecution -DocumentName 'AWSQuickStartInstanceConfiguration' -Parameter @{
            'InstanceId'=$instanceId
            'TimeZone'='UTC'
            'Locale'='en-US'
          }
          Start-SSMAutomationExecution -DocumentName 'AWSQuickStartActiveDirectoryDC' -Parameter @{
            'InstanceId'=$instanceId
            'DomainDNSName'='${DomainDNSName}'
            'DomainAdminUser'='${DomainNetBIOSName}\\${DomainAdminUser}'
            'DomainAdminPassword'='${DomainAdminPassword}'
            'SafeModePassword'='${DomainAdminPassword}'
            'ADServer2NetBIOSName'='${ADServer2NetBIOSName}'
            'InstallRSAT'='${InstallRSAT}'
          }
          </powershell>
      Tags:
        - Key: Name
          Value: !Ref ADServer2NetBIOSName

  PKIStack:
    Type: AWS::CloudFormation::Stack
    Condition: DeployPKI
    DependsOn: ADServer2
    Properties:
      TemplateURL: !Sub 
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/cfn-ps-microsoft-pki/templates/two-tier-offline.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        DomainDNSName: !Ref DomainDNSName
        DomainNetBIOSName: !Ref DomainNetBIOSName
        DomainAdminUser: !Ref DomainAdminUser
        DomainAdminPassword: !Ref DomainAdminPassword
        VPCID: !Ref VPCID
        VPCCIDR: !Ref VPCCIDR
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        KeyPairName: !Ref KeyPairName
        CaKeyLength: !Ref CaKeyLength
        CaHashAlgorithm: !Ref CaHashAlgorithm
        CaValidityPeriodUnits: !Ref CaValidityPeriodUnits
        OrCaValidityPeriodUnits: !Ref OrCaValidityPeriodUnits
        UseS3ForCRL: !Ref UseS3ForCRL
        S3CRLBucketName: !If [UseS3CRL, !Ref S3CRLBucketName, '']
        QSS3BucketName: !Ref QSS3BucketName
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
Outputs:
  ADServer1PrivateIP:
    Description: Private IP address of the first Active Directory server
    Value: !Ref ADServer1PrivateIP

  ADServer2PrivateIP:
    Description: Private IP address of the second Active Directory server
    Value: !Ref ADServer2PrivateIP

  DomainAdmin:
    Description: Domain administrator account
    Value: !Sub ${DomainNetBIOSName}\${DomainAdminUser}

  DomainDNSName:
    Description: Fully qualified domain name (FQDN) of the forest root domain
    Value: !Ref DomainDNSName

  ADServer1ID:
    Description: Instance ID of the first Active Directory server
    Value: !Ref ADServer1

  ADServer2ID:
    Description: Instance ID of the second Active Directory server
    Value: !Ref ADServer2

  EnterpriseCAID:
    Condition: DeployPKI
    Description: Enterprise CA instance ID
    Value: !GetAtt PKIStack.Outputs.EnterpriseCAID

  EnterpriseCAIP:
    Condition: DeployPKI
    Description: Enterprise CA private IP address
    Value: !GetAtt PKIStack.Outputs.EnterpriseCAIP
